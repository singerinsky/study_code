// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace gl {
class CSRequireLogin;
class CSRequireLoginDefaultTypeInternal;
extern CSRequireLoginDefaultTypeInternal _CSRequireLogin_default_instance_;
class CSRequireUserInfo;
class CSRequireUserInfoDefaultTypeInternal;
extern CSRequireUserInfoDefaultTypeInternal _CSRequireUserInfo_default_instance_;
class SCRequireUserInfo;
class SCRequireUserInfoDefaultTypeInternal;
extern SCRequireUserInfoDefaultTypeInternal _SCRequireUserInfo_default_instance_;
}  // namespace gl
PROTOBUF_NAMESPACE_OPEN
template<> ::gl::CSRequireLogin* Arena::CreateMaybeMessage<::gl::CSRequireLogin>(Arena*);
template<> ::gl::CSRequireUserInfo* Arena::CreateMaybeMessage<::gl::CSRequireUserInfo>(Arena*);
template<> ::gl::SCRequireUserInfo* Arena::CreateMaybeMessage<::gl::SCRequireUserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gl {

enum message_type : int {
  NONE = 0,
  USER_INFO_TEST_REQ = 1,
  USER_INFO_TEST_ACK = 2,
  USER_LOGIN_REQ = 3
};
bool message_type_IsValid(int value);
constexpr message_type message_type_MIN = NONE;
constexpr message_type message_type_MAX = USER_LOGIN_REQ;
constexpr int message_type_ARRAYSIZE = message_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_type_descriptor();
template<typename T>
inline const std::string& message_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, message_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function message_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    message_type_descriptor(), enum_t_value);
}
inline bool message_type_Parse(
    const std::string& name, message_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<message_type>(
    message_type_descriptor(), name, value);
}
// ===================================================================

class CSRequireUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gl.CSRequireUserInfo) */ {
 public:
  inline CSRequireUserInfo() : CSRequireUserInfo(nullptr) {};
  virtual ~CSRequireUserInfo();

  CSRequireUserInfo(const CSRequireUserInfo& from);
  CSRequireUserInfo(CSRequireUserInfo&& from) noexcept
    : CSRequireUserInfo() {
    *this = ::std::move(from);
  }

  inline CSRequireUserInfo& operator=(const CSRequireUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRequireUserInfo& operator=(CSRequireUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRequireUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSRequireUserInfo* internal_default_instance() {
    return reinterpret_cast<const CSRequireUserInfo*>(
               &_CSRequireUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSRequireUserInfo& a, CSRequireUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRequireUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRequireUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRequireUserInfo* New() const final {
    return CreateMaybeMessage<CSRequireUserInfo>(nullptr);
  }

  CSRequireUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRequireUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRequireUserInfo& from);
  void MergeFrom(const CSRequireUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRequireUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gl.CSRequireUserInfo";
  }
  protected:
  explicit CSRequireUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kNameFieldNumber = 2,
    kAgeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated string data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 age = 3;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .gl.message_type id = 1 [default = USER_INFO_TEST_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::gl::message_type id() const;
  void set_id(::gl::message_type value);
  private:
  ::gl::message_type _internal_id() const;
  void _internal_set_id(::gl::message_type value);
  public:

  // @@protoc_insertion_point(class_scope:gl.CSRequireUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  int id_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SCRequireUserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gl.SCRequireUserInfo) */ {
 public:
  inline SCRequireUserInfo() : SCRequireUserInfo(nullptr) {};
  virtual ~SCRequireUserInfo();

  SCRequireUserInfo(const SCRequireUserInfo& from);
  SCRequireUserInfo(SCRequireUserInfo&& from) noexcept
    : SCRequireUserInfo() {
    *this = ::std::move(from);
  }

  inline SCRequireUserInfo& operator=(const SCRequireUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCRequireUserInfo& operator=(SCRequireUserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCRequireUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCRequireUserInfo* internal_default_instance() {
    return reinterpret_cast<const SCRequireUserInfo*>(
               &_SCRequireUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCRequireUserInfo& a, SCRequireUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SCRequireUserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCRequireUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCRequireUserInfo* New() const final {
    return CreateMaybeMessage<SCRequireUserInfo>(nullptr);
  }

  SCRequireUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCRequireUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCRequireUserInfo& from);
  void MergeFrom(const SCRequireUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCRequireUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gl.SCRequireUserInfo";
  }
  protected:
  explicit SCRequireUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kNameFieldNumber = 2,
    kAgeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated string data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 age = 3;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .gl.message_type id = 1 [default = USER_INFO_TEST_ACK];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::gl::message_type id() const;
  void set_id(::gl::message_type value);
  private:
  ::gl::message_type _internal_id() const;
  void _internal_set_id(::gl::message_type value);
  public:

  // @@protoc_insertion_point(class_scope:gl.SCRequireUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  int id_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CSRequireLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gl.CSRequireLogin) */ {
 public:
  inline CSRequireLogin() : CSRequireLogin(nullptr) {};
  virtual ~CSRequireLogin();

  CSRequireLogin(const CSRequireLogin& from);
  CSRequireLogin(CSRequireLogin&& from) noexcept
    : CSRequireLogin() {
    *this = ::std::move(from);
  }

  inline CSRequireLogin& operator=(const CSRequireLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRequireLogin& operator=(CSRequireLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSRequireLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSRequireLogin* internal_default_instance() {
    return reinterpret_cast<const CSRequireLogin*>(
               &_CSRequireLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSRequireLogin& a, CSRequireLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRequireLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRequireLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSRequireLogin* New() const final {
    return CreateMaybeMessage<CSRequireLogin>(nullptr);
  }

  CSRequireLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSRequireLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSRequireLogin& from);
  void MergeFrom(const CSRequireLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRequireLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gl.CSRequireLogin";
  }
  protected:
  explicit CSRequireLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kNameFieldNumber = 2,
    kAgeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated string data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 age = 3;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .gl.message_type id = 1 [default = USER_LOGIN_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::gl::message_type id() const;
  void set_id(::gl::message_type value);
  private:
  ::gl::message_type _internal_id() const;
  void _internal_set_id(::gl::message_type value);
  public:

  // @@protoc_insertion_point(class_scope:gl.CSRequireLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  int id_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSRequireUserInfo

// optional .gl.message_type id = 1 [default = USER_INFO_TEST_REQ];
inline bool CSRequireUserInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSRequireUserInfo::has_id() const {
  return _internal_has_id();
}
inline void CSRequireUserInfo::clear_id() {
  id_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gl::message_type CSRequireUserInfo::_internal_id() const {
  return static_cast< ::gl::message_type >(id_);
}
inline ::gl::message_type CSRequireUserInfo::id() const {
  // @@protoc_insertion_point(field_get:gl.CSRequireUserInfo.id)
  return _internal_id();
}
inline void CSRequireUserInfo::_internal_set_id(::gl::message_type value) {
  assert(::gl::message_type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CSRequireUserInfo::set_id(::gl::message_type value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gl.CSRequireUserInfo.id)
}

// optional string name = 2;
inline bool CSRequireUserInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSRequireUserInfo::has_name() const {
  return _internal_has_name();
}
inline void CSRequireUserInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSRequireUserInfo::name() const {
  // @@protoc_insertion_point(field_get:gl.CSRequireUserInfo.name)
  return _internal_name();
}
inline void CSRequireUserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gl.CSRequireUserInfo.name)
}
inline std::string* CSRequireUserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gl.CSRequireUserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CSRequireUserInfo::_internal_name() const {
  return name_.Get();
}
inline void CSRequireUserInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CSRequireUserInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gl.CSRequireUserInfo.name)
}
inline void CSRequireUserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gl.CSRequireUserInfo.name)
}
inline void CSRequireUserInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gl.CSRequireUserInfo.name)
}
inline std::string* CSRequireUserInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CSRequireUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:gl.CSRequireUserInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSRequireUserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gl.CSRequireUserInfo.name)
}
inline std::string* CSRequireUserInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gl.CSRequireUserInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CSRequireUserInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gl.CSRequireUserInfo.name)
}

// optional int32 age = 3;
inline bool CSRequireUserInfo::_internal_has_age() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSRequireUserInfo::has_age() const {
  return _internal_has_age();
}
inline void CSRequireUserInfo::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequireUserInfo::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequireUserInfo::age() const {
  // @@protoc_insertion_point(field_get:gl.CSRequireUserInfo.age)
  return _internal_age();
}
inline void CSRequireUserInfo::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  age_ = value;
}
inline void CSRequireUserInfo::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:gl.CSRequireUserInfo.age)
}

// repeated string data = 4;
inline int CSRequireUserInfo::_internal_data_size() const {
  return data_.size();
}
inline int CSRequireUserInfo::data_size() const {
  return _internal_data_size();
}
inline void CSRequireUserInfo::clear_data() {
  data_.Clear();
}
inline std::string* CSRequireUserInfo::add_data() {
  // @@protoc_insertion_point(field_add_mutable:gl.CSRequireUserInfo.data)
  return _internal_add_data();
}
inline const std::string& CSRequireUserInfo::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& CSRequireUserInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:gl.CSRequireUserInfo.data)
  return _internal_data(index);
}
inline std::string* CSRequireUserInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gl.CSRequireUserInfo.data)
  return data_.Mutable(index);
}
inline void CSRequireUserInfo::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gl.CSRequireUserInfo.data)
  data_.Mutable(index)->assign(value);
}
inline void CSRequireUserInfo::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gl.CSRequireUserInfo.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void CSRequireUserInfo::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gl.CSRequireUserInfo.data)
}
inline void CSRequireUserInfo::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gl.CSRequireUserInfo.data)
}
inline std::string* CSRequireUserInfo::_internal_add_data() {
  return data_.Add();
}
inline void CSRequireUserInfo::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gl.CSRequireUserInfo.data)
}
inline void CSRequireUserInfo::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gl.CSRequireUserInfo.data)
}
inline void CSRequireUserInfo::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gl.CSRequireUserInfo.data)
}
inline void CSRequireUserInfo::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gl.CSRequireUserInfo.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSRequireUserInfo::data() const {
  // @@protoc_insertion_point(field_list:gl.CSRequireUserInfo.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSRequireUserInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gl.CSRequireUserInfo.data)
  return &data_;
}

// -------------------------------------------------------------------

// SCRequireUserInfo

// optional .gl.message_type id = 1 [default = USER_INFO_TEST_ACK];
inline bool SCRequireUserInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SCRequireUserInfo::has_id() const {
  return _internal_has_id();
}
inline void SCRequireUserInfo::clear_id() {
  id_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gl::message_type SCRequireUserInfo::_internal_id() const {
  return static_cast< ::gl::message_type >(id_);
}
inline ::gl::message_type SCRequireUserInfo::id() const {
  // @@protoc_insertion_point(field_get:gl.SCRequireUserInfo.id)
  return _internal_id();
}
inline void SCRequireUserInfo::_internal_set_id(::gl::message_type value) {
  assert(::gl::message_type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void SCRequireUserInfo::set_id(::gl::message_type value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gl.SCRequireUserInfo.id)
}

// optional string name = 2;
inline bool SCRequireUserInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SCRequireUserInfo::has_name() const {
  return _internal_has_name();
}
inline void SCRequireUserInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SCRequireUserInfo::name() const {
  // @@protoc_insertion_point(field_get:gl.SCRequireUserInfo.name)
  return _internal_name();
}
inline void SCRequireUserInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gl.SCRequireUserInfo.name)
}
inline std::string* SCRequireUserInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gl.SCRequireUserInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SCRequireUserInfo::_internal_name() const {
  return name_.Get();
}
inline void SCRequireUserInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SCRequireUserInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gl.SCRequireUserInfo.name)
}
inline void SCRequireUserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gl.SCRequireUserInfo.name)
}
inline void SCRequireUserInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gl.SCRequireUserInfo.name)
}
inline std::string* SCRequireUserInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SCRequireUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:gl.SCRequireUserInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SCRequireUserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gl.SCRequireUserInfo.name)
}
inline std::string* SCRequireUserInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gl.SCRequireUserInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SCRequireUserInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gl.SCRequireUserInfo.name)
}

// optional int32 age = 3;
inline bool SCRequireUserInfo::_internal_has_age() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SCRequireUserInfo::has_age() const {
  return _internal_has_age();
}
inline void SCRequireUserInfo::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRequireUserInfo::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCRequireUserInfo::age() const {
  // @@protoc_insertion_point(field_get:gl.SCRequireUserInfo.age)
  return _internal_age();
}
inline void SCRequireUserInfo::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  age_ = value;
}
inline void SCRequireUserInfo::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:gl.SCRequireUserInfo.age)
}

// repeated string data = 4;
inline int SCRequireUserInfo::_internal_data_size() const {
  return data_.size();
}
inline int SCRequireUserInfo::data_size() const {
  return _internal_data_size();
}
inline void SCRequireUserInfo::clear_data() {
  data_.Clear();
}
inline std::string* SCRequireUserInfo::add_data() {
  // @@protoc_insertion_point(field_add_mutable:gl.SCRequireUserInfo.data)
  return _internal_add_data();
}
inline const std::string& SCRequireUserInfo::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& SCRequireUserInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:gl.SCRequireUserInfo.data)
  return _internal_data(index);
}
inline std::string* SCRequireUserInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gl.SCRequireUserInfo.data)
  return data_.Mutable(index);
}
inline void SCRequireUserInfo::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gl.SCRequireUserInfo.data)
  data_.Mutable(index)->assign(value);
}
inline void SCRequireUserInfo::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gl.SCRequireUserInfo.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void SCRequireUserInfo::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gl.SCRequireUserInfo.data)
}
inline void SCRequireUserInfo::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gl.SCRequireUserInfo.data)
}
inline std::string* SCRequireUserInfo::_internal_add_data() {
  return data_.Add();
}
inline void SCRequireUserInfo::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gl.SCRequireUserInfo.data)
}
inline void SCRequireUserInfo::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gl.SCRequireUserInfo.data)
}
inline void SCRequireUserInfo::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gl.SCRequireUserInfo.data)
}
inline void SCRequireUserInfo::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gl.SCRequireUserInfo.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SCRequireUserInfo::data() const {
  // @@protoc_insertion_point(field_list:gl.SCRequireUserInfo.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SCRequireUserInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gl.SCRequireUserInfo.data)
  return &data_;
}

// -------------------------------------------------------------------

// CSRequireLogin

// optional .gl.message_type id = 1 [default = USER_LOGIN_REQ];
inline bool CSRequireLogin::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSRequireLogin::has_id() const {
  return _internal_has_id();
}
inline void CSRequireLogin::clear_id() {
  id_ = 3;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gl::message_type CSRequireLogin::_internal_id() const {
  return static_cast< ::gl::message_type >(id_);
}
inline ::gl::message_type CSRequireLogin::id() const {
  // @@protoc_insertion_point(field_get:gl.CSRequireLogin.id)
  return _internal_id();
}
inline void CSRequireLogin::_internal_set_id(::gl::message_type value) {
  assert(::gl::message_type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CSRequireLogin::set_id(::gl::message_type value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gl.CSRequireLogin.id)
}

// optional string name = 2;
inline bool CSRequireLogin::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSRequireLogin::has_name() const {
  return _internal_has_name();
}
inline void CSRequireLogin::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSRequireLogin::name() const {
  // @@protoc_insertion_point(field_get:gl.CSRequireLogin.name)
  return _internal_name();
}
inline void CSRequireLogin::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gl.CSRequireLogin.name)
}
inline std::string* CSRequireLogin::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gl.CSRequireLogin.name)
  return _internal_mutable_name();
}
inline const std::string& CSRequireLogin::_internal_name() const {
  return name_.Get();
}
inline void CSRequireLogin::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CSRequireLogin::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:gl.CSRequireLogin.name)
}
inline void CSRequireLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:gl.CSRequireLogin.name)
}
inline void CSRequireLogin::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:gl.CSRequireLogin.name)
}
inline std::string* CSRequireLogin::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CSRequireLogin::release_name() {
  // @@protoc_insertion_point(field_release:gl.CSRequireLogin.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSRequireLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:gl.CSRequireLogin.name)
}
inline std::string* CSRequireLogin::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gl.CSRequireLogin.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CSRequireLogin::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gl.CSRequireLogin.name)
}

// optional int32 age = 3;
inline bool CSRequireLogin::_internal_has_age() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSRequireLogin::has_age() const {
  return _internal_has_age();
}
inline void CSRequireLogin::clear_age() {
  age_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequireLogin::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSRequireLogin::age() const {
  // @@protoc_insertion_point(field_get:gl.CSRequireLogin.age)
  return _internal_age();
}
inline void CSRequireLogin::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  age_ = value;
}
inline void CSRequireLogin::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:gl.CSRequireLogin.age)
}

// repeated string data = 4;
inline int CSRequireLogin::_internal_data_size() const {
  return data_.size();
}
inline int CSRequireLogin::data_size() const {
  return _internal_data_size();
}
inline void CSRequireLogin::clear_data() {
  data_.Clear();
}
inline std::string* CSRequireLogin::add_data() {
  // @@protoc_insertion_point(field_add_mutable:gl.CSRequireLogin.data)
  return _internal_add_data();
}
inline const std::string& CSRequireLogin::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& CSRequireLogin::data(int index) const {
  // @@protoc_insertion_point(field_get:gl.CSRequireLogin.data)
  return _internal_data(index);
}
inline std::string* CSRequireLogin::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gl.CSRequireLogin.data)
  return data_.Mutable(index);
}
inline void CSRequireLogin::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gl.CSRequireLogin.data)
  data_.Mutable(index)->assign(value);
}
inline void CSRequireLogin::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gl.CSRequireLogin.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void CSRequireLogin::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gl.CSRequireLogin.data)
}
inline void CSRequireLogin::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gl.CSRequireLogin.data)
}
inline std::string* CSRequireLogin::_internal_add_data() {
  return data_.Add();
}
inline void CSRequireLogin::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gl.CSRequireLogin.data)
}
inline void CSRequireLogin::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gl.CSRequireLogin.data)
}
inline void CSRequireLogin::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gl.CSRequireLogin.data)
}
inline void CSRequireLogin::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gl.CSRequireLogin.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSRequireLogin::data() const {
  // @@protoc_insertion_point(field_list:gl.CSRequireLogin.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSRequireLogin::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gl.CSRequireLogin.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gl::message_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gl::message_type>() {
  return ::gl::message_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
